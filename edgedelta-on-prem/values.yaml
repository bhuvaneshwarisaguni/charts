fullNameOverride: ""
dnsSuffix: "svc.cluster.local"
repository: "gcr.io/edgedelta"
storageClassName: ""
usingOpenShift: false # Should be true for OpenShift for smooth procedure

# This should be enabled and edited for secure clusters such as OpenShift
# podSecurityContext:
#   runAsUser: 1000

openFaas: # Valid for all deployment types
  enabled: true
  minRehydrationCount: 1
  isFullDeployment: true
  proLicense: ""

ingress:
  shouldInstall: true
  enabled: true

clusterIssuer:
  shouldInstall: true
  enabled: true
  letsEncryptEmail: ""

  namespaceLabeler:
    image: bitnami/kubectl:1.22.9

# This section will be used by both API and UI component
# These needs to be set in advance by using Okta admin panel and generating a new application
okta:
  token: ""
  clientId: ""
  newUserPassword: ""
  redirectUrl: ""

api:
  enabled: true
  useServiceAccount: true
  masterSecret: "" # It will use a randomly-generated UUIDv4 if not set
  port: 4444
  hostName: ""
  corsOverrides: []

  replicaCount: 4
  resources:
    limits:
      cpu: 1024m
      memory: 2048Mi
    requests:
      cpu: 512m
      memory: 256Mi

  login:
    saml:
      enabled: false
      redirectUrl: ""

app:
  enabled: true
  useServiceAccount: true
  port: 5555
  hostName: ""
  overrideApiUrl: "" # Default is https://<api_host_name>, however if this field is not empty, we will override api url with given one

  replicaCount: 3
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 20Mi

rehydration:
  orgId: ""
  mode: "prod"
  pushBatchSize: "10000"
  token: ""
  tokenSecretName: "ed-rehydration-token"
  apiEndpoint: "" # It should be empty for "full" deployment mode. Default is https://api.edgedelta.com
  memoryLimit: 16 # In terms of GB

  pollerOptions: # Only valid if deployment mode is "only_rehydration"
    enabled: false
    useServiceAccount: true
    pollInterval: 10s

    resources:
      limits:
        cpu: 200m
        memory: 200Mi
      requests:
        cpu: 100m
        memory: 100Mi

  handlerOptions: # Only valid if deployment mode is "only_rehydration"
    enabled: false
    useServiceAccount: true
    port: 8080
    replicaCount: 1

    cpuRequest: 1000m
    cpuLimit: 2000m

initializer:
  enabled: true
  useServiceAccount: true

  accessKeyIdName: "ed-scylladb-access-key-id"
  secretKeyName: "ed-scylladb-secret-key"
  configMapName: "ed-bootstrap-status"

  samlSubjectName: "ed-on-prem-org.com" # Certificate CN, SAN
  samlOrgName: "ed-on-prem-org" # Certificate Organization
  samlKeyName: "saml-key"
  samlCertName: "saml-cert"

  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi

# Rest is the configuration for third party dependencies and Helm charts
scylla:
  image: scylladb/scylla:4.5.1
  enabled: true
  useServiceAccount: true

  resources:
    limits:
      cpu: 2000m
      memory: 6Gi
    requests:
      cpu: 1000m
      memory: 3Gi

  storageResources:
    requests:
      storage: 10Gi

  config: |
    num_tokens: 256
    commitlog_sync: periodic
    commitlog_sync_period_in_ms: 10000
    commitlog_segment_size_in_mb: 32
    seed_provider:
      - class_name: org.apache.cassandra.locator.SimpleSeedProvider
        parameters:
          - seeds: "127.0.0.1"
    listen_address: localhost
    native_transport_port: 9042
    native_shard_aware_transport_port: 19042
    read_request_timeout_in_ms: 5000
    write_request_timeout_in_ms: 2000
    cas_contention_timeout_in_ms: 1000
    endpoint_snitch: SimpleSnitch
    alternator_enforce_authorization: true
    rpc_address: localhost
    rpc_port: 9160
    api_address: localhost
    api_port: 10000
    batch_size_warn_threshold_in_kb: 128
    batch_size_fail_threshold_in_kb: 1024
    partitioner: org.apache.cassandra.dht.Murmur3Partitioner
    commitlog_total_space_in_mb: -1
    murmur3_partitioner_ignore_msb_bits: 12

influxdb:
  enabled: false
  useServiceAccount: true

  image:
    repository: influxdb
    tag: 2.2.0-alpine

  port: 8086
  # Required if agents will use influx outside of cluster.
  hostName: ""

  resources:
    limits:
      cpu: 2000m
      memory: 6Gi
    requests:
      cpu: 1000m
      memory: 3Gi

  persistence:
    storageResources:
      requests:
        storage: 10Gi
    mountPath: /var/lib/influxdb2

  adminUser:
    organization: "influxdata"
    bucket: "default"
    username: "admin"

openfaas:
  # securityContext: true # This should be enabled and edited for secure clusters such as OpenShift
  functionNamespace: "openfaas-fn" # It should be renamed as helm namespace
  serviceType: "NodePort"
  basic_auth: true
  generateBasicAuth: true
  openfaasPro: false # Set to true when license is not empty
  ceScaling: false
  proScaler:
    image: ghcr.io/openfaasltd/autoscaler:0.2.0 # or edgedelta/openfaas-autoscaler:0.2.0
    enabled: false # Set to true when license is not empty
  faasIdler:
    image: ghcr.io/openfaas/faas-idler-pro:0.4.4 # or edgedelta/openfaas-faas-idler-pro:0.4.4
    enabled: false # Set to true when license is not empty
  oidcAuthPlugin:
    image: ghcr.io/openfaas/openfaas-oidc-plugin:0.5.1 # or edgedelta/openfaas-oidc-plugin:0.5.1
    enabled: false
  gateway:
    image: ghcr.io/openfaas/gateway:0.21.3 # or edgedelta/openfaas-gateway:0.21.3
    readTimeout: "1h5m"
    writeTimeout: "1h5m"
    upstreamTimeout: "1h" # Must be smaller than read/write_timeout
  basicAuthPlugin:
    image: ghcr.io/openfaas/basic-auth:0.21.1 # or edgedelta/openfaas-basic-auth:0.21.1
  faasnetes:
    image: ghcr.io/openfaas/faas-netes:0.14.1 # or edgedelta/openfaas-faas-netes:0.14.1
    readTimeout: "1h5m"
    writeTimeout: "1h5m"
  operator:
    image: ghcr.io/openfaas/faas-netes:0.14.1 # or edgedelta/openfaas-faas-netes:0.14.1
  queueWorkerPro:
    image: ghcr.io/openfaas/queue-worker-pro:0.1.0-rc5 # or edgedelta/openfaas-queue-worker-pro:0.1.0-rc5
    enabled: false # Set to true when license is not empty
  queueWorker:
    image: ghcr.io/openfaas/queue-worker:0.12.2 # or edgedelta/openfaas-queue-worker:0.12.2
    ackWait: "1h"
  prometheus:
    image: prom/prometheus:v2.11.0
  alertmanager:
    image: prom/alertmanager:v0.18.0
  nats:
    image: nats-streaming:0.22.0
    metrics:
      image: natsio/prometheus-nats-exporter:0.8.0
      enabled: false
  ingressOperator:
    image: ghcr.io/openfaas/ingress-operator:0.6.7 # or edgedelta/openfaas-ingress-operator:0.6.7
  autoscaler:
    enabled: false # Set to true when license is not empty
  clusterRole: false # Set to true when license is not empty

ingress-nginx:
  controller:
    # This should be enabled and edited for secure clusters such as OpenShift
    # podSecurityContext:
    #   runAsUser: 1000
    replicaCount: 1
    image:
      repository: k8s.gcr.io/ingress-nginx/controller # or edgedelta/ingress-nginx-controller
      tag: v1.2.0
      digest: ""
    admissionWebhooks:
      patch:
        # This should be enabled and edited for secure clusters such as OpenShift
        # runAsUser: 1000
        image:
          repository: k8s.gcr.io/ingress-nginx/kube-webhook-certgen # or edgedelta/ingress-nginx-kube-webhook-certgen
          tag: v1.1.1
          digest: ""

cert-manager:
  # This should be enabled and edited for secure clusters such as OpenShift
  # securityContext:
  #   runAsUser: 1000
  installCRDs: true
  image:
    repository: quay.io/jetstack/cert-manager-controller # or edgedelta/jetstack-cert-manager-controller
    tag: "v1.8.0"
  webhook:
    # This should be enabled and edited for secure clusters such as OpenShift
    # securityContext:
    #   runAsUser: 1000
    image:
      repository: quay.io/jetstack/cert-manager-webhook # or edgedelta/jetstack-cert-manager-webhook
      tag: "v1.8.0"
  cainjector:
    # This should be enabled and edited for secure clusters such as OpenShift
    # securityContext:
    #   runAsUser: 1000
    image:
      repository: quay.io/jetstack/cert-manager-cainjector # or edgedelta/jetstack-cert-manager-cainjector
      tag: "v1.8.0"
  startupapicheck:
    # This should be enabled and edited for secure clusters such as OpenShift
    # securityContext:
    #   runAsUser: 1000
    image:
      repository: quay.io/jetstack/cert-manager-ctl # or edgedelta/jetstack-cert-manager-ctl
      tag: "v1.8.0"